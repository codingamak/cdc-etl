version: '3.1'

networks:
  cdc-network:
    name: cdc-network
    driver: bridge

services:
  zookeeper:
    container_name: zookeeper
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes # You have set the environment variable ALLOW_ANONYMOUS_LOGIN=yes. For safety reasons, do not use this flag in a production environment
  kafka:
    container_name: kafka  
    image: docker.io/bitnami/kafka:3.4.0
    ports:
      - "9092:9092"
      - '9093:9093'
      - '9094:9094'
    depends_on:
      - zookeeper
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ENABLE_KRAFT=yes
      - BITNAMI_DEBUG=true
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes # For safety reasons, do not use this flag in a production environment.

      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://${SERVER_IP}:9094

      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_MAX_REQUEST_SIZE=2147483647
  init-kafka:
    container_name: init-kafka
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      # echo -e 'Creating kafka topics....'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic connect-configs --replication-factor 1 --partitions 1 --config cleanup.policy=compact
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic connect-offsets --replication-factor 1 --partitions 25 --config cleanup.policy=compact --config min.cleanable.dirty.ratio=0.001 --config segment.ms=5000
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic connect-statuses --replication-factor 1 --partitions 1 --config cleanup.policy=compact
      # kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic mysql-schema-history --replication-factor 1 --partitions 1

      # echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
  kafka-connect:
    container_name: kafka-connect
    build: 
      context: .
      dockerfile: dockerfiles/cp-kafka-connect.Dockerfile
    ports:
      - "8083:8083"
    environment:
      - CONNECT_GROUP_ID=group-id-nih-bos
      - CONNECT_CONFIG_STORAGE_TOPIC=connect-configs
      - CONNECT_OFFSET_STORAGE_TOPIC=connect-offsets
      - CONNECT_STATUS_STORAGE_TOPIC=connect-statuses
      - CONNECT_BOOTSTRAP_SERVERS=kafka:9092
      - CONNECT_KEY_CONVERTER=io.confluent.connect.avro.AvroConverter
      - CONNECT_VALUE_CONVERTER=io.confluent.connect.avro.AvroConverter
      - CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL=http://${SERVER_IP}:8081
      - CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL=http://${SERVER_IP}:8081
      - CONNECT_REST_ADVERTISED_HOST_NAME=${SERVER_IP}
      - CONNECT_PRODUCER_MAX_REQUEST_SIZE=2147483647
    depends_on:
      - kafka
      - schema-registry
  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:5.5.3
    environment:
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - SCHEMA_REGISTRY_AVRO_COMPATIBILITY_LEVEL=NONE
    ports:
      - 8081:8081
    depends_on:
      - zookeeper
      - kafka
  ksqldb-server:
    image: confluentinc/ksqldb-server:0.28.2
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_CONNECT_URL: "http://${SERVER_IP}:8083"
      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: 'earliest' 
      KSQL_KSQL_QUERY_PULL_TABLE_SCAN_ENABLED: 'true'
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://${SERVER_IP}:8081"

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.28.2
    container_name: ksqldb-cli
    depends_on:
      - kafka
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local